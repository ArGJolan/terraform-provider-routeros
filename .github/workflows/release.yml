# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "vX.Y.Z" (ie. v0.1.0).

name: CI
on:
  push:
    branches:
      - '**'
    paths:
      - main.go
      - 'routeros/*.go'
      - '.github/workflows/*.yml'
    
  pull_request:
    branches:
      - '**'
    paths:
      - main.go
      - 'routeros/*.go'
      - '.github/workflows/*.yml'


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: golangci/golangci-lint-action@v3


  test:
    name: test
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        experimental: [false]
        go:
          - 1.19
        os: [ubuntu-latest]
        routeros_version:
          - "7.5"
          - "7.6"
          - "7.7"
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: | 
          go mod download

      - name: Build
        run: go build -v .

      - name: Set up RouterOS
        run: |
          sudo pip3 install routeros_api
          python3 .github/scripts/setup_routeros.py
        env:
          ROS_USERNAME: admin
          ROS_PASSWORD: ''
          ROS_IP_ADDRESS: 127.0.0.1

      - name: Run client tests
        run: go test -v ./routeros
        env:
          ROS_HOSTURL: https://127.0.0.1
          ROS_USERNAME: admin
          ROS_PASSWORD: ''
          ROS_INSECURE: true
          TF_ACC: 1

    services:
      routeros:
        image: vaerhme/routeros:v${{ matrix.routeros_version }}
        ports:
          - 443:443
          - 8728:8728
          - 8729:8729
        volumes:
          - /dev/net/tun:/dev/net/tun
        options: >-
          --cap-add=NET_ADMIN

  
  release:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
          # check-latest: true
          cache: true

      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      
      - name: Release
        uses: go-semantic-release/action@v1
        with:
          hooks: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}